(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{590:function(l,s,e){"use strict";e.r(s);var n=e(41),h=Object(n.a)({},(function(){var l=this,s=l.$createElement,e=l._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[e("h2",{attrs:{id:"shell简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell简介"}},[l._v("#")]),l._v(" shell简介")]),l._v(" "),e("p",[l._v("shell是什么东西之前，不妨让我们重新审视使用者和计算机系统的关系：")]),l._v(" "),e("p",[l._v("我们知道计算机的运作不能离开硬件，但使用者却无法直接操作硬件， 硬件的驱动只能通过一种称为“操作系统(OS，Opertating System)”的软件来管控。 事实上，我们每天所谈的“linux”，严格来说只是一个操作系统(OS), 我们称之为“内核(kernel)”。")]),l._v(" "),e("p",[l._v("然而，从使用者的角度来说，使用者没有办法直接操作一个kernel， 而是通过kernel的“外壳”程序，也就是所谓的shell，来与kernel沟通。")]),l._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[l._v("扩展知识（点击展开）")]),l._v(" "),e("p",[l._v("从技术的角度来说，shell是一个使用者与系统的交互界面(interface), 只能让使用者通过命令行(command line)来使用系统来完成工作。 因此，shell最简单的定义就是----命令解释器( Command Interpreter):")]),l._v(" "),e("ul",[e("li",[l._v("将使用者的命令翻译给kernel来处理；")]),l._v(" "),e("li",[l._v("同时，将kernel的处理结果翻译给使用者。")])]),l._v(" "),e("p",[l._v("每次当我们完成系统登入(login), 我们就取得一个交互模式的shell， 也称之为login shell 或者 primary shell。")]),l._v(" "),e("p",[l._v("若从进程(process)的角度来说，我们在shell所下达的命令，均是shell所产生的子进程。 这种现象，我暂可称之为fork。")]),l._v(" "),e("p",[l._v("如果是执行shell脚本(shell script)的话，脚本中命令则是由另一个非交互模式的 子shell(sub shell)来执行的。 也就是primary shell产生sub shell的进程，而该sub shell 进程再产生script中所有命令的进程。 (关于进程，我们日后有机会再补充)")]),l._v(" "),e("p",[l._v("这里， 我们必须知道：kernel 与 shell 是不同的两套软件，而且都是可以被替换的：")]),l._v(" "),e("ul",[e("li",[l._v("不同的OS使用不同的kernel;")]),l._v(" "),e("li",[l._v("同一个kernel之上，也可以使用不同的shell;")])])]),l._v(" "),e("p",[l._v("所以通俗来讲，shell 是用来解决用户如何与操作系统通信的问题。shell 就是 壳，区别于 核。Linux 的 核 叫 kernel , 壳有很多种，有命令行的： bash 、sh 、csh 、ksh， 有图形化的： KDE、GNOME、CDE、 XFCE ，据说 Linus 那伙人只负责开发 核。")]),l._v(" "),e("p",[l._v("其实不光Linux，或许你现在正在使用的Windows也遵循这套理论，Windows 9X 系列的 核 是 DOS，图形化的 壳 叫 Windows Explorer ，命令行 壳 叫 command。从 Windows XP 开始，Windows 的 核 叫做 Windows NT (Windows New Technology)，图形化 壳 叫 Windows Explorer ，命令行 壳 有 command 、cmd.exe ，后面还推出了 Windows PowerShell。由于 Windows NT 技术是针对图形化壳设计出来的核，而 Windows 9X 就是在 DOS 上加了一个 壳。")]),l._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[l._v("扩展知识（点击展开）")]),l._v(" "),e("p",[l._v("实际上不管是 命令行 shell 还是图形化 shell ，都是访问操作系统中的某个具有一定功能、可以处理具体事务的文件(二进制文件 ---- 此类文件经常被称作工具)、或包含一定内容的文件(文本文件)，通常都是通过文件名访问(当然有例外，比如 Linux 的 alias 命令，比如 通过链接文件访问源文件)，所以通常文件名就成了命令。在 Linux 的 /bin 目录和 /usr/bin 目录中有 Linux 命令对应的文件，在 Windows 的 %windir% 目录即 操作系统安装硬盘分区的 Windows 目录 和 %windir%\\system32 目录中有 Windows 命令对应的文件， 此外还可以引入外部命令和自定义命令。而 shell 的作用就是解释某条命令对应的文件的文件路径，供用户使用并返回使用结果。这也就是为何有 shell 脚本一说。脚本语言是种解释型语言，不能编译成二进制代码，区别于编译型语言。就如 shell ,它的作用是将命令解释成对应的文件名，然后通过文件名调用文件。对于图形化 shell 是通过鼠标的点击来访问文件的，但实际也是通过文件名，因为每个文件都有包含文件名的完整路径。")])]),l._v(" "),e("h2",{attrs:{id:"shell-两种执行命令的方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell-两种执行命令的方式"}},[l._v("#")]),l._v(" shell 两种执行命令的方式")]),l._v(" "),e("ul",[e("li",[l._v("交互式：用户输入一条命令，shell就解释执行一条；")]),l._v(" "),e("li",[l._v("批处理：事先写一个shell脚本，其中有很多条命令，让shell一次把这些命令执行完，而不必一条一条地敲命令；")])]),l._v(" "),e("p",[l._v("同时当shell作为一种程序设计语言。Shell 程序设计可以简单地理解成 DOS/Windows 下的批处理，但它远比批处理要强大，shell 编程有很多 C 语言和其他编程语言的特性，例如都有变量和各种控制语句等，然而有没有其他编程语言那么复杂。")]),l._v(" "),e("h2",{attrs:{id:"几种常见的shell"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#几种常见的shell"}},[l._v("#")]),l._v(" 几种常见的shell")]),l._v(" "),e("p",[l._v("脚本语言需要解释器来解释执行，shell作为脚本语言一种同样需要解释器来执行脚本。Unix/Linux上常见的Shell脚本解释器有bash、sh、csh、ksh等，习惯上把它们称作一种shell。我们常说有多少种shell，其实说的是shell脚本解释器。\n目前，Shell 是 UNIX/Linux 系统的标准组成部分，正如 UNIX 的版本众多一样，Shell 也产生了很多个版本，经过多年的发展和完善，现在流行的 Shell 主要有 sh（Bourne Shell）、bash（Bourne Shell）、csh（C-Shell）、ksh（Korn Shell），及集众家之所长的zsh。")]),l._v(" "),e("h2",{attrs:{id:"查看系统默认shell"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看系统默认shell"}},[l._v("#")]),l._v(" 查看系统默认shell")]),l._v(" "),e("p",[l._v("通过如下命令可以查看系统默认的shell类型：")]),l._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[l._v("echo")]),l._v(" "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[l._v("$SHELL")]),l._v("\n")])]),l._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[l._v("1")]),e("br")])])])}),[],!1,null,null,null);s.default=h.exports}}]);